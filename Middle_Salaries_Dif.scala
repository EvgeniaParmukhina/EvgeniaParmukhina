import scala.collection.immutable.ListMap

object Middle_Salaries_Dif extends App {

  // отклонение з/п от среднего значения

  println("Напишите программу, которая рассчитывает для каждого сотрудника отклонение(в процентах) от среднего значения оклада на уровень всего отдела. В итоговом значении должно учитываться в большую или меньшую сторону отклоняется размер оклада. На вход вышей программе подаются все значения, аналогичные предыдущей программе, а также список со значениями окладов сотрудников отдела 100, 150, 200, 80, 120, 75.")

  val salaries = collection.mutable.Map[String, Float]("Иванов" -> 100, "Петров" -> 150, "Сидоров" -> 200, "Кузнецов" -> 80, "Смирнов" -> 120, "Косолапов" -> 75)

  println("Зарплаты сотрудников отдела: " + salaries)

  val middleSalary = salaries.values.sum/salaries.size

  println("Средняя зарплата сотрудников отдела: " + middleSalary)

  salaries foreach (x => println (x._1 + ": отклонение зарплаты " + ((x._2 / middleSalary) - 1) * 100 + "%"))

 // Напишите программу, которая вычисляет ежемесячный оклад сотрудника после вычета налогов. На вход вашей программе подается значение годового дохода до вычета налогов, размер премии – в процентах от годового дохода и компенсация питания.

  println("\nНапишите программу, которая вычисляет ежемесячный оклад сотрудника после вычета налогов. На вход вашей программе подается значение годового дохода до вычета налогов, размер премии – в процентах от годового дохода и компенсация питания.")

  println("Введите значение годового дохода: ")
  val oklad = scala.io.StdIn.readInt()
  println("Введите премию, %: ")
  val premia = scala.io.StdIn.readInt()
  println("Введите компенсацию питания: ")
  val pitanie = scala.io.StdIn.readInt()
  val nalog = 0.13

  val dohod = ((oklad*(1-nalog)) + (oklad*(premia/100)) + pitanie) / 12

  println("Ежемесячный доход: " + dohod)

  // Попробуйте рассчитать новую зарплату сотрудника, добавив(или отняв, если сотрудник плохо себя вел) необходимую сумму с учетом результатов прошлого задания. Добавьте его зарплату в список и вычислите значение самой высокой зарплаты и самой низкой.

  println("\nПопробуйте рассчитать новую зарплату сотрудника, добавив(или отняв, если сотрудник плохо себя вел) необходимую сумму с учетом результатов прошлого задания. Добавьте его зарплату в список и вычислите значение самой высокой зарплаты и самой низкой.")

  val okl = 100000

  println("Сотрудник Иванов, его оклад " + okl)

  println("Введите коэффициент выполнения последнего задания Иванова от - 5 до 5, где - 5 - очень плохо, а 5 - очень хорошо: ")
  val k = scala.io.StdIn.readFloat()
  val rez = 1 + (k * 5 / 100)
  println("Зарплата Иванова в новом месяце с учетом личных результатов:  " + okl*rez)

  // Также в вашу команду пришли два специалиста с окладами 350 и 90 тысяч рублей. Попробуйте отсортировать список сотрудников по уровню оклада от меньшего к большему.

  println("\nТакже в вашу команду пришли два специалиста с окладами 350 и 90 тысяч рублей. Попробуйте отсортировать список сотрудников по уровню оклада от меньшего к большему.")

  salaries.addOne("Васечкин" -> 350)
  salaries.addOne("Васелискин" -> 90)

  // вариант 1 с созданием map

  val res = ListMap(salaries.toSeq.sortBy(_._2):_*)
  println(res)

  // вариант 2 с обычной сортировкой
  println(salaries.toSeq.sortBy(_._2))

  //  Кажется, вы взяли в вашу команду еще одного сотрудника и предложили ему оклад 130 тысяч. Вычислите самостоятельно номер сотрудника в списке так, чтобы сортировка не нарушилась и добавьте его на это место.

  println("\nКажется, вы взяли в вашу команду еще одного сотрудника и предложили ему оклад 130 тысяч. Вычислите самостоятельно номер сотрудника в списке так, чтобы сортировка не нарушилась и добавьте его на это место.")

  val idxm = for ( ((k,v),i) <- res.zipWithIndex ) yield ((k,i),v)
  println("Список сотрудников с порядковыми номерами: " + idxm)

  val newemployeesalary = 130

  println("Номер нового сотрудника Кислого с зп 130 т.р. в списке:" + idxm.find(_._2 > 130).toMap.keys.toMap.values)

  val newidxm = for ( ((k,v),i) <- salaries.addOne("Кислый" -> 130).toSeq.sortBy(_._2).zipWithIndex ) yield ((k,i),v)

  println("Новый список сотрудников :" + newidxm)

  // Попробуйте вывести номера сотрудников из полученного списка, которые попадают под категорию middle. На входе программе подается «вилка» зарплаты специалистов уровня middle.

  println("\nПопробуйте вывести номера сотрудников из полученного списка, которые попадают под категорию middle. На входе программе подается «вилка» зарплаты специалистов уровня middle")

  val minmiddle = 100
  val maxmiddle = 200

  val result = newidxm.filter(x => x._2 > minmiddle && x._2 < maxmiddle)

  println("Номера сотрудников в зп middle между 100 и 200 т.р.: " + result.toMap.keys.toMap.values)

  //  Однако наступил кризис и ваши сотрудники требуют повысить зарплату. Вам необходимо проиндексировать зарплату каждого сотрудника на уровень инфляции – 7%

  println("\n Однако наступил кризис и ваши сотрудники требуют повысить зарплату. Вам необходимо проиндексировать зарплату каждого сотрудника на уровень инфляции – 7%")

  println(newidxm.foreach(p => print(p._1, p._2*1.07)))

}
